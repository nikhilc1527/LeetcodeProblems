#include <vector>
#include <map>
#include <unordered_map>

#include "../Nodes.h"

class Solution {
public:
  std::unordered_map<int, int> in_ind, post_ind;

  TreeNode* generate(std::vector<int>& inorder, std::vector<int>& postorder, int i, int j) {
    if (i > j) return nullptr;
    int val = postorder[j];
    TreeNode* root = new TreeNode(val);
    if (i == j) return root;

    int ind = in_ind[val];
    ind++;
    if (ind >= j) {
      root->left = generate(inorder, postorder, i, j - 1);
    }
    else {
      int next_val = inorder[ind];
      int next_ind = post_ind[next_val];
      root->left = generate(inorder, postorder, i, next_ind - 1);
      root->right = generate(inorder, postorder, next_ind, j - 1);
    }

    return root;
  }
  
  TreeNode* buildTree(std::vector<int>& inorder, std::vector<int>& postorder) {
    if (!inorder.size() || !postorder.size()) return nullptr;
    
    for (int i = 0; i < inorder.size(); i++) {
      in_ind[inorder[i]] = i;
      post_ind[postorder[i]] = i;
    }

    return generate(inorder, postorder, 0, postorder.size() - 1);
  }
};

int main(int argc, char *argv[]) {
  std::vector<int> inorder = {9,3,15,20,7};
  std::vector<int> postorder = {9,15,7,20,3};

  TreeNode* res = Solution().buildTree(inorder, postorder);

  inorder = {3, 2, 1};
  postorder = {3, 2, 1};

  res = Solution().buildTree(inorder, postorder);
  
  return 0;
}
