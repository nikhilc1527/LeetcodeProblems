#include <vector>
#include <stack>
#include <deque>
#include <iostream>

class Solution {
public:
  /*
  bool sort(int n, std::vector<std::vector<int>> &adjList, std::vector<bool> &visited, std::vector<bool> &curVisited, std::vector<int> &res) {
    if (curVisited[n]) return true;
    if (visited[n]) return false;
    curVisited[n] = true;
    visited[n] = true;
    
    for (auto &i : adjList[n]) {
      bool cycle = sort(i, adjList, visited, curVisited, res);
      if (cycle) return true;
    }

    res.push_back(n);

    return false;
  }
  
  std::vector<int> findOrder(int n, std::vector<std::vector<int>>& pres) {
    std::vector<std::vector<int>> adjList(n);
    for (auto &i : pres) {
      adjList[i[0]].push_back(i[1]);
    }

    std::vector<bool> done(n, false);
    std::vector<int> res;
    for (int i = 0; i < n; i++) {
      if (done[i]) continue;
      std::vector<bool> curVisited(n, false);
      if (sort(i, adjList, done, curVisited, res)) return {};
    }

    return res;
  }
  */

  bool sort(std::vector<bool> vis, std::vector<bool> globVis, int n, std::vector<std::vector<int>>& pres, int i) {
    if (vis[i]) return true;
    if (globVis[i]) return false;
    vis[i] = true;
    globVis[i] = true;
    
  }

  std::vector<int> findOrder(int n, std::vector<std::vector<int>>& pres) {
    std::vector<int> res(n);
    std::vector<bool> vis(n), globVis(n);

    for (int i = 0; i < pres.size(); i++) {
      if (!globVis[i]) {
	
      }
    }

    return res;
  }

};

int main() {
  int n = 2;
  std::vector<std::vector<int>> pres = {{1, 0}};
  std::vector<int> res = Solution().findOrder(n, pres);
  for (auto i : res) {
    std::cout << i << std::endl;
  }
}
