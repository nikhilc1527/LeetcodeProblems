#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <tuple>
#include <iostream>

#include "../Nodes.h"

class Solution {
public:
  int getHeight(TreeNode* root) {
    if (!root) return 0;
    else return 1 + std::max(getHeight(root->left), getHeight(root->right));
  }
  
  std::vector<std::vector<std::string>> printTree(TreeNode* root) {
    int height = getHeight(root);
    int width = std::pow(2, height) - 1;
    std::vector<std::vector<std::string>> res(height, std::vector<std::string>(width, ""));

    std::queue<std::tuple<TreeNode*, int, int, int>> q, nextLevel; // node, left, right, row_number
    q.push(std::make_tuple(root, 0, width, 0));
    while (!q.empty()) {
      nextLevel = std::queue<std::tuple<TreeNode*, int, int, int>>();
      while (!q.empty()) {
        auto &[node, left, right, col] = q.front();
        q.pop();
        if (!node) continue;
        int mid = left + (right - left) / 2;
        res[col][mid] = std::to_string(node->val);
        nextLevel.push(std::make_tuple(node->left, left, mid, col + 1));
        nextLevel.push(std::make_tuple(node->right, mid + 1, right, col + 1));
      }

      q = nextLevel;
    }

    return res;
  }
};

int main(int argc, char *argv[]) {
  TreeNode* root = stringToTreeNode("[1,2,null,null,3,4,null,5,null,6,null]");
  Solution s;

  auto res = s.printTree(root);
  for (auto i : res) {
    for (auto j : i) {
      std::cout << j << ' ';
    }
    std::cout << '\n';
  }
  
  return 0;
}
