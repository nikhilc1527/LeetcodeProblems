#include <vector>
#include <string>
#include <string_view>
#include <iostream>

class Solution {
public:
  bool searchRight(std::vector<std::vector<char>> board, int i, int j, std::string_view word) {
    if (word.size() == 0) return true;
    if (i >= board.size() || i < 0 || j >= board[i].size() || j < 0) return false;
    if (board[i][j] != word[0]) return false;
    return searchRight(board, i + 1, j, word.substr(1, word.size()));
  }

  bool searchLeft(std::vector<std::vector<char>> board, int i, int j, std::string_view word) {
    if (word.size() == 0) return true;
    if (i >= board.size() || i < 0 || j >= board[i].size() || j < 0) return false;
    if (board[i][j] != word[0]) return false;
    return searchRight(board, i - 1, j, word.substr(1, word.size()));
  }

  bool searchUp(std::vector<std::vector<char>> board, int i, int j, std::string_view word) {
    if (word.size() == 0) return true;
    if (i >= board.size() || i < 0 || j >= board[i].size() || j < 0) return false;
    if (board[i][j] != word[0]) return false;
    return searchRight(board, i, j - 1, word.substr(1, word.size()));
  }

  bool searchDown(std::vector<std::vector<char>> board, int i, int j, std::string_view word) {
    if (word.size() == 0) return true;
    if (i >= board.size() || i < 0 || j >= board[i].size() || j < 0) return false;
    if (board[i][j] != word[0]) return false;
    return searchRight(board, i, j + 1, word.substr(1, word.size()));
  }
  
  bool exist(std::vector<std::vector<char>>& board, std::string word) {
    for (int i = 0; i < board.size(); i++) {
      for (int j = 0; j < board[i].size(); j++) {
	if (board[i][j] == word[0] && (searchUp(board, i, j, word) || searchDown(board, i, j, word) || searchLeft(board, i, j, word) || searchRight(board, i, j, word))) {
	  return true;
	}
      }
    }
    return false;
  }
};

int main(int argc, char *argv[]) {
  std::vector<std::vector<char>> board = {{'A', 'B', 'C', 'E'}, {'S', 'F', 'C', 'S'}, {'A', 'D', 'E', 'E'}};
  std::string target = "CBA";
  std::cout << std::boolalpha << Solution().exist(board, target) << '\n';
  
  return 0;
}
