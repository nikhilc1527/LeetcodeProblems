#include <vector>
#include <array>
#include <iostream>

class Solution {
public:
  void custom_sort(std::vector<char> &tasks) {
    std::array<int, 26> freqs {0};
    for (auto i : tasks) {
      freqs[i - 'A']++;
    }
    bool done = false;
    int i = 0;
    while (!done) {
      done = true;
      for (int j = 0; j < 26; j++) {
        if (freqs[j] >= 1) {
          done = false;
          freqs[j]--;
          tasks[i++] = j + 'A';
        }
      }
    }
  }
  
  int leastInterval(std::vector<char>& tasks, int n) {
    custom_sort(tasks);

    std::size_t size = tasks.size();
    int res = 0, cur_time;
    
    for (int i = 0; i < size; i++) {
      cur_time = 1;
      for (int j = i - 1; j >= 0 && i - j <= n; j--) {
        if (tasks[j] == tasks[i]) {
          cur_time += n - (i - j);
          break;
        }
      }

      res += cur_time;
    }
    
    return res;
  }
};

int main(int argc, char *argv[]) {
  std::vector<char> tasks = {'A', 'A', 'A', 'A', 'A', 'A', 'B', 'C', 'D', 'E', 'F', 'G'};
  tasks = {'A', 'A', 'A', 'B', 'B', 'B'};
  tasks = {'A', 'B', 'C', 'A', 'B', 'C'};

  std::cout << Solution().leastInterval(tasks, 2) << '\n';
  
  return 0;
}

/*
  ["A", "A", "A", "A"]
3
["A","A","A","B","B","B"] 
3 
["A","A","A","B","B","B", "A", "A"] 
2 
["A","A","A","B","B","B"] 
0 
["A","A","A","A","A","A","B","C","D","E","F","G","B", "C", "D", "D", "E", "B"] 
2 
["A","A","A","A","A","A","B","C","D","E","F","G"] 
2
["A", "B", "C", "A", "B", "C"]
3
 */
